trigger:
  branches:
    include:
    - refs/heads/master
    - refs/heads/release/*
    - refs/heads/feature/*

pool:
  vmImage: ubuntu-latest

resources:
- repo: self

variables:
# Service Connections
- name: ARM_Service_Connection_Prod
  value: codebuilddeploy-terraform
# Docker
- name: dockerRegistry_Service_Connection
  value: 'codebuilddeploy-acr'
- name: imageRepository
  value: 'code-build-deploy'
- name: containerRegistry
  value: 'codebuilddeploy.azurecr.io'
- name: dockerfilePath
  value: '$(Build.SourcesDirectory)/src/CodeBuildDeploy/Dockerfile'
- name: resourceGroup
  value: 'codebuilddeploy-rg'
- name: containerAppName
  value: 'codebuilddeploy'

# Branch Variables
- name: isMaster
  value: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
- name: isRelease
  value: $[startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')]
- name: isPullRequest
  value: $[eq(variables['Build.Reason'], 'PullRequest')]

# Versioning
- template: versioning-variables.yml

name: $[variables['Build.Number']]

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Docker Build and Deploy
    steps:
    - checkout: self
      displayName: 'Checkout Blogs Repo'
      persistCredentials: true

    - bash: |
        echo "isMaster = $(isMaster)"
        echo "isRelease = $(isRelease)"
        echo "isPullRequest = $(isPullRequest)"
        echo "SourceVersion = $(Build.SourceVersion)"
        echo "SourceVersion.Short = $(Build.SourceVersion.Short)"
        echo "Build Number = $(Build.Number)"
        echo "Version Assembly = $(Version.Assembly)"
        echo "Version File = $(Version.File)"
        echo "Version Informational = $(Version.Informational)"
        echo "Version Major = $(Version.Major)"
        echo "Version Minor = $(Version.Minor)"
        echo "Version Patch = $(Version.Patch)"
      displayName: Output Version

    - task: NuGetAuthenticate@1
      displayName: 'Authenticate to NuGet'

    - task: Docker@2
      displayName: Docker Build
      inputs:
        command: build
        containerRegistry: $(dockerRegistry_Service_Connection)
        repository: $(imageRepository)
        tags: |
          latest
          $(Build.Number)
        Dockerfile: $(dockerfilePath)
        buildContext: .
        arguments: '--build-arg FEED_ACCESSTOKEN=$(VSS_NUGET_ACCESSTOKEN) --build-arg VERSION=$(Build.Number) --build-arg ASSEMBLY_VERSION=$(Version.Assembly) --build-arg FILE_VERSION=$(Version.File) --build-arg INFORMATIONAL_VERSION=$(Version.Informational) --build-arg PACKAGE_VERSION=$(Build.Number)'

    - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
      - task: Docker@2
        displayName: Docker Push
        inputs:
          command: push
          containerRegistry: $(dockerRegistry_Service_Connection)
          repository: $(imageRepository)
          tags: |
            latest
            $(Build.Number)

      - script: |
          git tag $(Build.Number)
          git push origin $(Build.Number)
        workingDirectory: $(Build.SourcesDirectory)
        displayName: Tag Version in Git

- ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
  - stage: DeployProd
    displayName: Deploy Prod
    jobs:
    - job: DeployProd
      displayName: Deploy Prod
      steps:
      - task: AzureContainerApps@1
        displayName: 'Azure Container App Deploy: codebuilddeploy'
        inputs:
          azureSubscription: '$(ARM_Service_Connection_Prod)'
          containerAppName: $(containerAppName)
          resourceGroup: $(resourceGroup)
          imageToDeploy: '$(containerRegistry)/$(imageRepository):$(Build.Number)'
          targetPort: '8080'
...
