<section class="container g-pt-100 g-pb-50">
    <div class="row justify-content-center">
        <div class="col-lg-9">
            <h3 class="h4 g-color-black g-font-weight-600">@Model.Title</h3>
            <div class="g-my-10">
                <p><a href="https://trunkbaseddevelopment.com/" target="_blank">Trunk Based Development</a> is a branching strategy that operates with no long-running branches. Commits are made directly on main and releases come from builds of main.</p>
                <img class="w-100" src="~/img/blog/TrunkBasedDev/trunkbaseddev.png" alt="Branches">
                <p>In large teams, short lived branches can be used for managing offline reviews through pull requests etc.</p>
                <img class="w-100" src="~/img/blog/TrunkBasedDev/trunkbaseddev-slb.png" alt="Branches">
                <p>When using short lived branches, all the ongoining commits to main should be pulled into the branch. To do this never merge, instead rebasing the branch to the new main head, leaving all the branch commits after the main build.</p>
                <pre><code class="language-bash">    $ git checkout master
    $ git pull  // get latest from master
    $ git checkout mybranch
    $ git rebase master  // get masters updates and make them the base of my branch
    $ git push --force-with-lease</code></pre>
                <p>Another useful technique is to use reset to merge commits to remove any unnecessary noise.</p>
                <pre><code class="language-bash">    $ git commit -am "feature x"
    $ git commit -am "fix spelling mistake"
    $ git reset --soft HEAD~2
    $ git commit -am "feature x"
    $ git push --force-with-lease</code></pre>
                <p>This branching strategy is often popular among DevOps teams and teams practicing continuous delivery. In fact it is a key enabler of continuous integration and by extension continuous delivery, as teams committing directly to main at least every 24hours is a CI core requirement.</p>
                <p>For comparison, an opposing branching stratagy would be <a href="https://www.gitkraken.com/learn/git/git-flow" target="_blank">GitFlow</a>. This model uses long running feature, release and hotfix branches where your code would not be continuously integrated. It can be challenging for teams and engineers coming from a GitFlow type strategy to shift their way of thinking.</p>
            </div>
        </div>
    </div>
</section>