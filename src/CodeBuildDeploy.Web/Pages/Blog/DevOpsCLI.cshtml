<!-- DevOpsCLI Heading -->
<div class="container pt-10 pb-5">
    <div class="row justify-content-center">
        <div class="col-lg-9">
            <h2>AKS CLI container for DevOps Teams</h2>
            <p>
                When working with multiple projects, with multiple environments, each containing their own logins, details, configurations, it can 
                get quite cumersome, switching details and reconfiguring your local environment for that specific AKS cluster. Multitasking 
                between these environments becomes somewhat unworkable.
            </p>
            <p>
                This is where the <a href="https://github.com/MarkPollard/DevOps.CLI.AKS" target="_blank">DevOps.CLI.AKS</a> utility comes in.
                It creates preconfigured containers with the required CLI tools, scripts and extensions for managing the AKS cluster instances. It 
                sets the promps to show the currently configured Azure user/subscription and Kubernetes cluster/namespace you have selected.
                It creates dedicated AZURE_CONFIG_DIR and KUBECONFIG paths, so that it doesn't affect your local configuration.
            </p>
            <img class="w-75 mx-auto d-block mt-5" src="~/img/blog/DevOpsCLI/exec.png" alt="Exec">
        </div>
        <!-- End Col -->
    </div>
    <!-- End Row -->
</div>
<!-- End DevOpsCLI Heading -->

<!-- Local Setup -->
<div class="container pb-3">
    <div class="row justify-content-center">
        <div class="col-lg-9">
            <div class="my-2">
                <h4 class="mt-4">Local Machine Setup</h4>
                <p>
                    First you'll need to configure the tools on your local workstation machine. In this article we are using Windows with Docker desktop 
                    running on WSL2.
                </p>
                <p>
                    If you haven't already install and configure WSL2 based on this <a asp-area="" asp-page="/Blog/ViewBlogEntry" asp-route-urlSlug="WSLInterop">previous post</a>.
                </p>
                <p>
                    It's also assumed that you have Git installed, however it can be installed with the following command if required.
                </p>
                <pre><code class="language-bash">    winget install -e --id Git.Git --source winget</code></pre>
                <p>
                    Then install Docker desktop with the following command. Select to use WSL2 when prompted. Docker desktop will also install the kubectl command line utility.
                </p>
                <pre><code class="language-bash">    winget install -e --id Docker.DockerDesktop</code></pre>
                <p class="mt-3">
                    Finally, make sure you have a Nerd Font installed and configured. You can use 
                    <a asp-area="" asp-page="/Blog/ViewBlogEntry" asp-route-urlSlug="MyShell">this post</a> to configure your font.
                </p>
            </div>
        </div>
    </div>
</div>
<!-- End Local Setup -->

<!-- DevOps.CLI.AKS -->
<div class="container pb-3">
    <div class="row justify-content-center">
        <div class="col-lg-9">
            <div class="my-2">
                <h4 class="mt-4">Building and Running DevOps.CLI.AKS</h4>
                <p>
                    Now that our underlining machine is ready, we can clone the DevOps.CLI.AKS source repository.
                </p>
                <pre><code class="language-bash">    git clone https://github.com/MarkPollard/DevOps.CLI.AKS.git</code></pre>
                <p>
                    Create a new .dev.env and .prod.env file in the newly cloned dircetly, based on the .env.example. Set the INIT_ environment variables 
                    appropriately, based on you cluster and azure details.
                </p>
                <pre><code class="language-json">    INIT_CLUSTER=MY_CLUSTER_NAME
    INIT_CLUSTER_RG=MY_CLUSTER_RG
    INIT_CLUSTER_NS=MY_DEFAULT_NAMESPACE
    INIT_AZ_TENANT=MY_TENANT_ID
    INIT_AZ_SUBSCRIPTION=MY_SUBSCRIPTION_ID</code></pre>
                <p>
                    Now, run the docker compose command, from the root directly of the repo to startup the containers.
                </p>
                <pre><code class="language-bash">    docker compose up -d --build</code></pre>
                <p>
                    Connect to either the Dev or Prod container instance.
                </p>
                <pre><code class="language-bash">    #dev
    docker compose exec devops-cli-aks-dev /bin/bash --login
    #prod
    docker compose exec devops-cli-aks-prod /bin/bash --login</code></pre>
                <p>
                    The first time you connect you'll be asked to log on to your azure tenant with a devise code. It will then select the configured aks
                    cluster and namespace. Now run some commands
                </p>
                <img class="w-75 mx-auto d-block mt-5" src="~/img/blog/DevOpsCLI/commands.png" alt="Commands">
                <p class="mt-3">
                    Once you are done with the container instances, run a docker compose down to destroy them.
                </p>
                <pre><code class="language-bash">    docker compose down -v</code></pre>
            </div>
        </div>
    </div>
</div>
<!-- End DevOps.CLI.AKS -->